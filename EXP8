Experiment No 08: Implementation of Doubly Linked List.

Aim: To implement doubly linked list.
Objectives :
1.	 Implement a doubly linked list data structure in a programming language of choice.
2.	 Implement basic operations on the doubly linked list, including insertion, deletion, traversal, and searching.
3.	Analyze the time and space complexity of these operations to understand the efficiency of the data structure.
4.	Explore real-world applications where doubly linked lists are useful and efficient.
Theory :
A doubly linked list is a fundamental data structure used in computer science and software engineering. It consists of a sequence of elements, each containing a data field and two links, one pointing to the previous element and the other to the next element. The purpose of this experiment is to implement a doubly linked list and analyze its operations, performance, and applications.

Algorithm :
# Node class to represent individual elements in the doubly linked list
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None  # Reference to the next node
        self.prev = None  # Reference to the previous node

# DoublyLinkedList class to manage the list
class DoublyLinkedList:
    def __init__(self):
        self.head = None  # Reference to the first node
        self.tail = None  # Reference to the last node

    # Function to insert a new element at the beginning of the list
    def insert_at_beginning(self, data):
        new_node = Node(data)
        if self.head is None:
            self.head = self.tail = new_node
        else:
            new_node.next = self.head
            self.head.prev = new_node
            self.head = new_node

    # Function to insert a new element at the end of the list
    def insert_at_end(self, data):
        new_node = Node(data)
        if self.head is None:
            self.head = self.tail = new_node
        else:
            new_node.prev = self.tail
            self.tail.next = new_node
            self.tail = new_node

    # Function to delete a node with a specific data value
    def delete(self, data):
        current = self.head
        while current:
            if current.data == data:
                if current.prev:
                    current.prev.next = current.next
                else:
                    self.head = current.next

                if current.next:
                    current.next.prev = current.prev
                else:
                    self.tail = current.prev

                return  # Node found and deleted
            current = current.next

    # Function to traverse and print the list forwards
    def traverse_forward(self):
        current = self.head
        while current:
            print(current.data, end=" <-> ")
            current = current.next
        print("None")

    # Function to traverse and print the list backwards
    def traverse_backward(self):
        current = self.tail
        while current:
            print(current.data, end=" <-> ")
            current = current.prev
        print("None")

# Example usage:
dllist = DoublyLinkedList()
dllist.insert_at_end(1)
dllist.insert_at_end(2)
dllist.insert_at_end(3)
dllist.insert_at_beginning(0)

dllist.traverse_forward()  # Output: 0 <-> 1 <-> 2 <-> 3 <-> None
dllist.traverse_backward()  # Output: 3 <-> 2 <-> 1 <-> 0 <-> None

dllist.delete(2)
dllist.traverse_forward()  # Output: 0 <-> 1 <-> 3 <-> None


Code :
#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
struct node
{
    struct node *prev;
    struct node *next;
    int data;
};
struct node *head;
void insertion();

void deletion();

void display();

void main ()
{
int choice =0;
clrscr();
    while(choice != 9)
    {
	printf("\n*********Main Menu*********\n");
	printf("\nChoose one option from the following list ...\n");
	printf("\n===============================================\n");
	printf("\n1.Insert \n2.Delete \n3.display\n4.Exit\n");
	printf("\nEnter your choice?\n");
	scanf("\n%d",&choice);
	switch(choice)
	{
	    case 1:
	    insertion();
	    break;
	    case 2:
	    deletion();
	    break;
	    case 3:
	    display();
	    break;
	    case 4:
	    exit(0);
	    break;
	    default:
	    printf("Please enter valid choice..");
	}
    }
    getch();
}
void insertion()
{
   struct node *ptr,*temp;
   int item;
   ptr = (struct node *)malloc(sizeof(struct node));
   if(ptr == NULL)
   {
       printf("\nOVERFLOW");
   }
   else
   {
    printf("\nEnter Item value");
    scanf("%d",&item);
    ptr->data=item;
   if(head==NULL)
   {
      head = ptr;
      ptr -> next = head;
      ptr -> prev = head;
   }
   else
   {
       temp = head;
    while(temp -> next != head)
    {
	temp = temp -> next;
    }
    temp -> next = ptr;
    ptr -> prev = temp;
    head -> prev = ptr;
    ptr -> next = head;
    head = ptr;
   }
   printf("\nNode inserted\n");
}

}

void deletion()
{
    struct node *temp;
    if(head == NULL)
    {
	printf("\n UNDERFLOW");
    }
    else if(head->next == head)
    {
	head = NULL;
	free(head);
	printf("\nnode deleted\n");
    }
    else
    {
	temp = head;
	while(temp -> next != head)
	{
	    temp = temp -> next;
	}
	temp -> next = head -> next;
	head -> next -> prev = temp;
	free(head);
	head = temp -> next;
    }

}
void display()
{
    struct node *ptr;
    ptr=head;
    if(head == NULL)
    {
	printf("\nnothing to print");
    }
    else
    {
	printf("\n printing values ... \n");

	while(ptr -> next != head)
	{

	    printf("%d\n", ptr -> data);
	    ptr = ptr -> next;
	}
	printf("%d\n", ptr -> data);
    }

}


Output :
 


Conclusion :
Understanding the theory behind the implementation of a doubly linked list is crucial for building efficient and versatile data structures. By implementing and analyzing the operations of a doubly linked list, this experiment provides valuable insights into the practical aspects of this data structure and its applications in real-world scenarios.
